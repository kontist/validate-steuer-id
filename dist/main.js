!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var r=t();for(var n in r)("object"==typeof exports?exports:e)[n]=r[n]}}(this,(function(){return(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{isOccurencesValid:()=>n,validateSteuerId:()=>o,generateSteuerId:()=>i});const r=e=>{const t=e.length;if(0===t||void 0===t||isNaN(t))return null;let r,n,o=10;for(let i=0;i<t;i++)r=e[i],n=(r+o)%10,0===n&&(n=10),o=2*n%11;const i=11-o;return 10===i?0:i};function n(e){const t=(e=>{const t={};for(const r in e){const n=e[r];void 0===t[n]?t[n]=[r]:t[n]=[...t[n],r]}return t})((e=>{const t={};return e.forEach((e=>{e in t?t[e]+=1:t[e]=1})),t})(e));let r=!0;return"3"in t&&(r=!e.find(((e,t,r)=>e===r[t-1]&&e===r[t-2]))),((e={})=>{let t=0;for(const r in e)if(parseInt(r)>=2&&t++,t>1)return!1;return!0})(t)&&r}function o(e){if("string"!=typeof e)throw new TypeError("`steuerId` must be a string");let t=e.split("").map((e=>parseInt(e,10)));if(11!==e.length)throw new TypeError("`steuerId` must contain exactly 11 digits");if(!t.reduce((function(e,t){return e&&"number"==typeof t&&!isNaN(t)}),!0))throw new TypeError("`steuerId` can not contain non numerical characters");if(0===t[0])return!1;const o=t.slice(0,10);return!(!n(o)||r(o)!==(e=>{const t=e.length-1;return t>=0?e[t]:null})(t))}function i(){let e;e=[];const t=Math.round(8*Math.random()+1);let o;for(e.push(t),o=[];e.length<10;){let t,r=!1;for(;!r;)t=Math.round(9*Math.random()),o=[...e,t],n(o)&&(r=!0);e=[...o]}return e.join("")+String(r(e))}return t})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,