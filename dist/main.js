!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var r in n)("object"==typeof exports?exports:e)[r]=n[r]}}(this,(function(){return(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{generateSteuerId:()=>i,isOccurrencesValid:()=>r,isSteuerIdValid:()=>o});const n=e=>{const t=e.length;if(0===t||void 0===t||isNaN(t))return null;let n,r,o=10;for(let i=0;i<t;i++)n=e[i],r=(n+o)%10,0===r&&(r=10),o=2*r%11;const i=11-o;return 10===i?0:i};function r(e){const t=(e=>{const t={};for(const n in e){const r=e[n];void 0===t[r]?t[r]=[n]:t[r]=[...t[r],n]}return t})((e=>{const t={};return e.forEach((e=>{e in t?t[e]+=1:t[e]=1})),t})(e));let n=!0;return"3"in t&&(n=!e.find(((e,t,n)=>e===n[t-1]&&e===n[t-2]))),((e={})=>{let t=0;for(const n in e)if(parseInt(n)>=2&&t++,t>1)return!1;return!0})(t)&&n}function o(e){const t=e.split("").map((e=>parseInt(e,10)));if(0===t[0]||11!==e.length||!t.reduce((function(e,t){return e&&"number"==typeof t&&!isNaN(t)}),!0))return!1;const o=t.slice(0,10);return!(!r(o)||n(o)!==(e=>{const t=e.length-1;return t>=0?e[t]:null})(t))}function i(){let e;e=[];const t=Math.round(8*Math.random()+1);let o;for(e.push(t),o=[];e.length<10;){let t,n=!1;for(;!n;)t=Math.round(9*Math.random()),o=[...e,t],r(o)&&(n=!0);e=[...o]}return e.join("")+String(n(e))}return t})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,